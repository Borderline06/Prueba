
package vista.modulos.pedido;

import controlador.ControladorPedido;
import datos.AlmacenDatos;
import datos.comun.Coleccion;
import javax.swing.table.DefaultTableModel;
import modelo.Cliente;
import modelo.Pedido;
import utilitarios.Constantes;
import vista.comun.BotonTablaEditor;
import vista.comun.BotonTablaRender;
import vista.comun.Vista;

public class SubVistaListar extends Vista {

    private ControladorPedido controlador;//referencia del controlador padre
    private VistaPedido vistaPedido;
    public SubVistaListar(VistaPedido vistaPedido,ControladorPedido controlador, Constantes.Ordenamiento ordenamiento, Constantes.Busqueda busqueda) {
        super("Listado");
        initComponents();
        this.vistaPedido = vistaPedido;
        this.controlador = controlador;
        configurarBotonVerDetalleEnTabla();////
    }
    private void configurarBotonVerDetalleEnTabla() {
        tblLista.getColumnModel().getColumn(5).setCellRenderer(new BotonTablaRender());
        tblLista.getColumnModel().getColumn(5).setCellEditor(new BotonTablaEditor(tblLista,
                e -> verDetallePedido(Integer.parseInt(e.getActionCommand()))));
    }
    public void verDetallePedido(int pedidoId) {
        VistaPedido.punteroPedido  = vistaPedido.panelNuevoPedido.mostrarDetallesPedido(pedidoId);        
        vistaPedido.pedidoTab.setSelectedIndex(1);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblLista = new javax.swing.JTable();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        tblLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Fecha", "Estado", "Cliente", "Monto Total", "Ver"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblLista);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblLista;
    // End of variables declaration//GEN-END:variables

    @Override
    public void cambiarBusqueda(Constantes.Busqueda busqueda) {
        // no se usa busqueda
    }

    @Override
    public void cambiarOrdenamiento(Constantes.Ordenamiento ordenamiento) {
        // implementar ordenamiento
    }

    @Override
    public void Limpiar() {
        // no hay nada que limpiar aqui!
    }

    @Override
    public void Listar() {
        // actualizar listado
        Coleccion<Pedido> pedidos = controlador.listarTodo();
        pedidos.iniciarIteracion();
        DefaultTableModel modelo = (DefaultTableModel) tblLista.getModel();
        modelo.setRowCount(0); //limpiar tabla
        //iterar la coleccion e ir agregando las filas a la tabla
        while(pedidos.actualElementoIteracion() != null){
            Pedido pedido = pedidos.actualElementoIteracion();
            Object[] nuevaFila = new Object[6];
            nuevaFila[0] = pedido.getId();
            nuevaFila[1] = pedido.getFechaDePedido();
            nuevaFila[2] = pedido.getEstadoDelPedido();
            if (pedido.getCliente() != null) {
                nuevaFila[3] = pedido.getCliente().getNombre();
            } else {
                //buscar cliente
                Cliente cliente = AlmacenDatos.clientes.buscar(pedido.getClienteId(), Constantes.Busqueda.SEQUENCIAL);
                if(cliente != null)
                    nuevaFila[3] = cliente.getNombre();
                else                
                    nuevaFila[3] = "Cliente no encontrado";
            }
            nuevaFila[4] = pedido.getMontoTotal();
            nuevaFila[5] = "Detalle"; // Botón "Ver Detalle"
            modelo.addRow(nuevaFila);
            pedidos.avanzarIteracion();
        }  
    }

    @Override
    public boolean Guardar() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void Activar(Constantes.Activar tipo) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public boolean Eliminar() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public <T> T Buscar() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public boolean validarCampos() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void Ordenar(boolean asc) {
        if (asc) {
            controlador.ordenar();
        } else {
            controlador.ordenar();
            controlador.invertir(); // Método adicional para invertir el orden de la colección
        }
        Listar();
    }
}
